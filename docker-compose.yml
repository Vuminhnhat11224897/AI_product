version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-production-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-zseefvhu12}
      POSTGRES_DB: testAI
      TZ: Asia/Ho_Chi_Minh
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/create_schema.sql:/docker-entrypoint-initdb.d/01_schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-network

  # AI Production Pipeline
  pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-production-pipeline
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-zseefvhu12}
      DB_NAME: testAI
      
      # OpenAI API Key
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Timezone
      TZ: Asia/Ho_Chi_Minh
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - ./prompts:/app/prompts
    networks:
      - ai-network
    restart: unless-stopped

  # Optional: Adminer for database management
  adminer:
    image: adminer:latest
    container_name: ai-production-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      TZ: Asia/Ho_Chi_Minh
    depends_on:
      - postgres
    networks:
      - ai-network
    restart: unless-stopped

networks:
  ai-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
